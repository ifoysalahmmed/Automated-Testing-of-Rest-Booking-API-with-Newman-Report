{
	"info": {
		"_postman_id": "cccea4f0-b155-4ae3-86e1-54137aa456af",
		"name": "Rest_Booking_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34581549"
	},
	"item": [
		{
			"name": "Create A Token For Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.environment.set(\"AccessToken\", jsonData.token);\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create A New Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.environment.set(\"BookingID\", jsonData.bookingid);\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.environment.set(\"FirstName\", firstName);\r",
							"\r",
							"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"pm.environment.set(\"LastName\", lastName);\r",
							"\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"TotalPrice\", totalPrice);\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
							"pm.environment.set(\"DepositPaid\", depositPaid);\r",
							"\r",
							"const moment = require('moment');\r",
							"const today = moment();\r",
							"\r",
							"pm.environment.set(\"CheckIn\", today.add(1, 'd').format(\"YYYY-MM-DD\"));\r",
							"\r",
							"pm.environment.set(\"CheckOut\", today.add(5, 'd').format(\"YYYY-MM-DD\"));\r",
							"\r",
							"var additionalNeeds = pm.variables.replaceIn(\"{{$randomNoun}}\");\r",
							"pm.environment.set(\"AdditionalNeeds\", additionalNeeds);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{FirstName}}\",\r\n\t\"lastname\" : \"{{LastName}}\",\r\n\t\"totalprice\" : {{TotalPrice}},\r\n\t\"depositpaid\" : {{DepositPaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{CheckIn}}\",\r\n    \t\"checkout\" : \"{{CheckOut}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{AdditionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get The Booking Details By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The First Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(jsonData.firstname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Last Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.lastname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Total Price\", function () {\r",
							"            pm.expect(pm.environment.get(\"TotalPrice\")).to.eql(jsonData.totalprice.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Deposit Paid\", function () {\r",
							"            pm.expect(pm.environment.get(\"DepositPaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckIn Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckIn\")).to.eql(jsonData.bookingdates.checkin);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckOut Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckOut\")).to.eql(jsonData.bookingdates.checkout);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Additional Needs\", function () {\r",
							"            pm.expect(pm.environment.get(\"AdditionalNeeds\")).to.eql(jsonData.additionalneeds);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update The Booking Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.environment.set(\"FirstName\", firstName);\r",
							"\r",
							"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"pm.environment.set(\"LastName\", lastName);\r",
							"\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\");\r",
							"pm.environment.set(\"TotalPrice\", totalPrice);\r",
							"\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\");\r",
							"pm.environment.set(\"DepositPaid\", depositPaid);\r",
							"\r",
							"const moment = require('moment');\r",
							"const today = moment();\r",
							"\r",
							"pm.environment.set(\"CheckIn\", today.add(1, 'd').format(\"YYYY-MM-DD\"));\r",
							"\r",
							"pm.environment.set(\"CheckOut\", today.add(5, 'd').format(\"YYYY-MM-DD\"));\r",
							"\r",
							"var additionalNeeds = pm.variables.replaceIn(\"{{$randomNoun}}\");\r",
							"pm.environment.set(\"AdditionalNeeds\", additionalNeeds);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The First Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(jsonData.firstname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Last Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.lastname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Total Price\", function () {\r",
							"            pm.expect(pm.environment.get(\"TotalPrice\")).to.eql(jsonData.totalprice.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Deposit Paid\", function () {\r",
							"            pm.expect(pm.environment.get(\"DepositPaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckIn Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckIn\")).to.eql(jsonData.bookingdates.checkin);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckOut Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckOut\")).to.eql(jsonData.bookingdates.checkout);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Additional Needs\", function () {\r",
							"            pm.expect(pm.environment.get(\"AdditionalNeeds\")).to.eql(jsonData.additionalneeds);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"\r",
							"        if (pm.response.status == \"Forbidden\") {\r",
							"            pm.test(\"Validating User Authorization\");\r",
							"        }\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{AccessToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{FirstName}}\",\r\n    \"lastname\": \"{{LastName}}\",\r\n    \"totalprice\": {{TotalPrice}},\r\n    \"depositpaid\": {{DepositPaid}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{CheckIn}}\",\r\n        \"checkout\": \"{{CheckOut}}\"\r\n    },\r\n    \"additionalneeds\": \"{{AdditionalNeeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{BookingID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check After The Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The First Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(jsonData.firstname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Last Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.lastname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Total Price\", function () {\r",
							"            pm.expect(pm.environment.get(\"TotalPrice\")).to.eql(jsonData.totalprice.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Deposit Paid\", function () {\r",
							"            pm.expect(pm.environment.get(\"DepositPaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckIn Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckIn\")).to.eql(jsonData.bookingdates.checkin);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckOut Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckOut\")).to.eql(jsonData.bookingdates.checkout);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Additional Needs\", function () {\r",
							"            pm.expect(pm.environment.get(\"AdditionalNeeds\")).to.eql(jsonData.additionalneeds);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update The First Name of The Booking Details",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"pm.environment.set(\"FirstName\", firstName);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The First Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(jsonData.firstname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Last Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.lastname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Total Price\", function () {\r",
							"            pm.expect(pm.environment.get(\"TotalPrice\")).to.eql(jsonData.totalprice.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Deposit Paid\", function () {\r",
							"            pm.expect(pm.environment.get(\"DepositPaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckIn Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckIn\")).to.eql(jsonData.bookingdates.checkin);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckOut Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckOut\")).to.eql(jsonData.bookingdates.checkout);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Additional Needs\", function () {\r",
							"            pm.expect(pm.environment.get(\"AdditionalNeeds\")).to.eql(jsonData.additionalneeds);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"\r",
							"        if (pm.response.status == \"Forbidden\") {\r",
							"            pm.test(\"Validating User Authorization\");\r",
							"        }\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{AccessToken}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{FirstName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{BookingID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check After The First Name Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The First Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"FirstName\")).to.eql(jsonData.firstname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Last Name\", function () {\r",
							"            pm.expect(pm.environment.get(\"LastName\")).to.eql(jsonData.lastname);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Total Price\", function () {\r",
							"            pm.expect(pm.environment.get(\"TotalPrice\")).to.eql(jsonData.totalprice.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Deposit Paid\", function () {\r",
							"            pm.expect(pm.environment.get(\"DepositPaid\")).to.eql(jsonData.depositpaid.toString());\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckIn Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckIn\")).to.eql(jsonData.bookingdates.checkin);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The CheckOut Date\", function () {\r",
							"            pm.expect(pm.environment.get(\"CheckOut\")).to.eql(jsonData.bookingdates.checkout);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Validating The Additional Needs\", function () {\r",
							"            pm.expect(pm.environment.get(\"AdditionalNeeds\")).to.eql(jsonData.additionalneeds);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete The Booking Record",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"\r",
							"        if (pm.response.status == \"Created\") {\r",
							"            pm.test(\"Validating Deleting of Booking Details\");\r",
							"        }\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"\r",
							"        if (pm.response.status == \"Forbidden\") {\r",
							"            pm.test(\"Validating User Authorization\");\r",
							"        }\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 405:\r",
							"        pm.test(\"Method Not Allowed: This status code indicates that the request method is not supported for the requested resource.\");\r",
							"\r",
							"        if (pm.response.status == \"Method Not Allowed\") {\r",
							"            pm.test(\"Specify Booking Details Already Deleted\");\r",
							"        }\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"\r",
							"    default:\r",
							"        pm.test(\"Unexpected Status Code: \" + statusCode);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{AccessToken}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check After The Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code;\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        pm.test(\"OK: This status code indicates that the request was successful, and the server returned the requested data.\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 201:\r",
							"        pm.test(\"Created: This status code means that the request was successful, and the server created a new resource.\", function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"\r",
							"    case 204:\r",
							"        pm.test(\"No Content: This status code indicates that the request was successful, but the server did not return any data.\");\r",
							"        break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request: This status code indicates that the request was malformed or invalid.\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unauthorized: This status code lets the client know that it is not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 403:\r",
							"        pm.test(\"Forbidden: This status code communicates that the client is authenticated but not authorized to access the requested resource.\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found: This status code indicates that the requested resource was not found on the server.\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error: This generic error code indicates the server encountered an unexpected condition that prevented it from fulfilling the request.\");\r",
							"        break;\r",
							"\r",
							"    case 502:\r",
							"        pm.test(\"Bad Gateway: This status code indicates that a server acting as a gateway or proxy received an invalid response from an upstream server.\");\r",
							"        break;\r",
							"\r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable: This status code is returned when the server is temporarily unable to handle the request. It’s often seen during periods of increased traffic or when the server is undergoing maintenance.\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingID}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingID}}"
					]
				}
			},
			"response": []
		}
	]
}